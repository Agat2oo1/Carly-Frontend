import Head from 'next/head'
import PageLayout from '../components/PageLayout'
import { GridSortModel } from "@mui/x-data-grid-pro";
import { useCallback, useEffect, useState } from "react";
import { DataGrid, GridColDef } from "@mui/x-data-grid";
import { Grid, Typography, Button } from "@mui/material";
import CustomizedDialogs from "../components/reservations/popUp";
import { CarlyDataGrid } from "../components/CarlyDataGrid";

export default function Reservations() {
  const [reservations, setReservations] = useState([]);
  const [reservationsSize, setReservationsSize] = useState(0);
  const [isLoading, setIsLoading] = useState(true);
  const [pageNumber, setPageNumber] = useState(0);
  const [pageSize, setPageSize] = useState<number>(3);
  const [queryOptions, setQueryOptions] = useState<GridSortModel>([]);

  const columns: GridColDef[] = [
    { field: "id", headerName: "ID", flex: 0.5 },
    {
      field: "brand", headerName: "Brand", flex: 1, minWidth: 110, valueGetter: (params: any) => {
        return params.row.car.model.brand.name;
      }
    },
    {
      field: "model", headerName: "Model", flex: 1, minWidth: 110, valueGetter: (params: any) => {
        return params.row.car.model.name;
      }
    },
    {
      field: "carType", headerName: "Car Type", flex: 1, minWidth: 110, valueGetter: (params: any) => {
        return params.row.car.model.carType.name;
      }
    },
    {
      field: "beginDate", headerName: "Begin date", flex: 1, minWidth: 110, valueGetter: (params: any) => {
        return params.row.endDate[2] + '-' + params.row.endDate[1] + '-' + params.row.endDate[0];
      }
    },
    {
      field: "endDate", headerName: "End date", flex: 1, minWidth: 110, valueGetter: (params: any) => {
        return params.row.endDate[2] + '-' + params.row.endDate[1] + '-' + params.row.endDate[0];
      }
    },
    {
      field: "beginPlace", headerName: "Begin Place", flex: 1, minWidth: 110, valueGetter: (params: any) => {
        return params.row.beginPlace;
      }
    },
    {
      field: "endPlace", headerName: "End Place", flex: 1, minWidth: 110, valueGetter: (params: any) => {
        return params.row.endPlace;
      }
    },
    {
      field: "click",
      headerName: "Details",
      width: 90,
      sortable: false,
      minWidth: 110,
      renderCell: (params) => {
        return <CustomizedDialogs data={params.row} />;
      }
    },
  ]

  const fetchReservations = (page: number, size: number, sortModel: GridSortModel) => {
    setIsLoading(true);
    //let sortBy: string = sortModel.length > 0 ? '&sortBy=' + sortModel[0].field.toUpperCase() : '';
    // TODO ten bÅ‚ad
    //let sortDirection: string = sortModel.length > 0 ? '&sortDirection=' + sortModel[0].sort!.toUpperCase() : '';
    fetch('https://carlybackend.azurewebsites.net/reservations?' +
      'size=' + size +
      '&page=' + (page + 1)
    )
      .then((response) => response.json())
      .then((json) => {
        console.log(json);
        setReservationsSize(json.totalRecords);
        setReservations(json.reservations);
      })
      .catch((error) => console.error(error))
      .finally(() => setIsLoading(false));
  }
  useEffect(() => {
    fetchReservations(pageNumber, pageSize, queryOptions);
  }, []);
  return (
    <>
      <Head>
        <title>Reservations</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/ColoredLogo.svg" />
      </Head>
      <main>
        <PageLayout>
          <Grid container alignItems="center"
            justifyContent="center">
            <Grid item sx={{ my: 2, width: '95%' }} >
              <Typography sx={{ textAlign: 'left' }} variant="h5" gutterBottom>
                RESERVATIONS
              </Typography>
            </Grid>
            <CarlyDataGrid
              rowHeight={40}
              rowCount={reservationsSize}
              pageNumber={pageNumber}
              setPageNumber={setPageNumber}
              pageSize={pageSize}
              setPageSize={setPageSize}
              isLoading={isLoading}
              data={reservations}
              fetchData={fetchReservations}
              columns={columns} />
          </Grid>
        </PageLayout>
      </main>
    </>
  )
}
